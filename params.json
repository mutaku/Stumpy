{"name":"Stumpy","body":"# STUMPy\r\n\r\n_Mutaku URL Shortener_\r\n\r\n\r\n### WHAT IS STUMPY?\r\n\r\nSTUMPy is a URL shortener written by xiao_haozi (Mutaku) using the django python web framework.\r\n\r\n\r\n### WHY STUMPY?\r\n\r\nThere are many url shorteners out there, and STUMPy does not do anything groundbreaking.\r\nHowever, there are several benefits that encouraged it's development:\r\n\r\n* you keep all the data and can access it at your will\r\n* you keep all the code and can access/change it at your will\r\n* simple to use, simple to run, and simple code\r\n* because of it's simplicity, it is easy to understand how url shorteners work and some of the possible optimizations\r\n* uses the django framework which allows for easy expansion, management, and tweaking\r\n* django also allows for a nice web UI for administration of all of the data\r\n\r\n\r\n### REQUIREMENTS:\r\n\r\n{requirement [link for source]}\r\n\r\n* \"Python\":http://www.python.org/getit/\r\n* \"Django\":http://docs.djangoproject.com/en/1.3/intro/install/\r\n* \"HTML5lib\":http://code.google.com/p/html5lib/\r\n* \"Bleach\":https://github.com/jsocol/bleach\r\n\r\n\r\n### INSTALLATION, SETUP, AND TESTING:\r\n\r\nSee: \"Django Install\":http://docs.djangoproject.com/en/1.3/intro/install/\r\nOnce you have django installed and running, you can checkout the repo and test things out in a few steps.\r\n\r\n►Grab the latest release with git.\r\n\r\n`git clone https://mutaku@github.com/mutaku/Stumpy.git`\r\n\r\n►Setup a mysql database that stumpy can access.\r\n\r\n```\r\ncreate database stumpy;\r\ngrant all on stumpy.* to 'SOMEUSER@localhost' identified by \"SOMEPASS\";\r\nflush privilieges;\r\n```\r\n\r\n►Copy the local_settings.py.dist file to local_settings.py .\r\n\r\n`cp local_settings.py.dist local_settings.py`\r\n\r\n►If you do not have a SECRET_KEY generated in Django you will need to generate one by running the keygen script and copy that key into your local_settings.py file in the next step.\r\n\r\n`python gimme_key.py`\r\n\r\n►Edit the local_settings.py file and add in your appropriate database variables and your secret key you already had from django or the one you generated above.\r\n\r\n►Sync the database to the models.\r\n\r\n`python manage.py syncdb`\r\n\r\n►Fire up the server and navigate to /admin in your browser. Go to sites->sites and edit the domain name to match the domain you are using. This will initially be set to 'example.com'.\r\n\r\n`python manage.py runserver`\r\n\r\n### PRODUCTION RUNNING:\r\n\r\nSee: \"Deploying Django\":http://docs.djangoproject.com/en/1.3/howto/deployment/\r\nOnce you have your webserver setup to serve the static files, you can set DEBUG=False. Without doing so, static files will not be served up by Django in production mode (DEBUG=False).\r\nAdditionally, ensure that you have set your proper FQDN through the admin interface as mentioned in the last step of the setup section.\r\n\r\nI have included an example fastcgi script (stumpy.fcgi) that you may point to with your webserver to run Stumpy in a production setting.\r\nThe following is an example of a stanza that you could use with Lighttpd to serve up Stumpy.\r\n\r\n```\r\n$HTTP[\"host\"] =~ \"example.com\" {\r\n  server.document-root = \"/home/JohnDoe/Stumpy/\"\r\n  fastcgi.server = ( \".fcgi\" =>\r\n                     ( \"localhost\" => (\r\n             \"socket\" => \"/var/lib/lighttpd/stumpy-fastcgi.socket\",\r\n                         \"bin-path\" => \"/home/JohnDoe/Stumpy/stumpy.fcgi\",\r\n                         \"check-local\" => \"disable\",\r\n                         \"min-procs\" => 2,\r\n             \"max-procs\" => 4,\r\n                       )\r\n                     ),\r\n                   )\r\n  alias.url = ( \"/static/admin\"  => \"/home/JohnDoe/django/contrib/admin/media/\" )\r\n  url.rewrite-once = ( \"^(/static/.*)$\" => \"$1\",\r\n                       \"^/favicon\\.ico$\" => \"/static/favicon.ico\",\r\n               \"^(/.*)$\" => \"/stumpy.fcgi$1\" )\r\n}\r\n```\r\n\r\n### USAGE:\r\n\r\nYou will probably be able to see from the urls.py how to go about using Stumpy. Here's the rundown:\r\n\r\n* [site]/ \t\t->\tindex view (recent stumps, popular stumps, and the bookmarklet)\r\n\r\n* [site]/[shorturl] \t->\tgrab shorturl and redirect\r\n\r\n* [site]/register\t\t->\tregister new user [for users - admin can add through admin interface]\r\n\r\n* [site]/admin \t\t*->\tadmin interface \r\n\r\n* [site]/url/?l=[longurl] \t*->\tshorten url [this is how the bookmarklet does it] [needs to be escaped if not using bookmarklet]\r\n\r\n*-> These views require authenticated_user and uses sessions\r\n\r\n\r\n### NOTES:\r\n\r\nA bookmarklet is ready to use and can be found by visiting the index page (\"/\") and dragging the 'stumpy it!' link to your bookmarks bar.\r\n\r\nTo add additional users that may submit URLs, add the user via the admin interface. They do not need to have any admin interface abilities to simply login and and submit URLs.\r\nIf you want a user to have permission to edit and delete urls (why?) you would have to enable those permissions in the user management in the admin interface.\r\n\r\n\r\n### FAQ:\r\n\r\n[coming soon]\r\n\r\n\r\n### HELP:\r\n\r\nMost of the information you might need can be found in the Django docs here: \"Django\":http://www.djangoproject.com/\r\nFor Stumpy specific help, see \"Stumpy\":https://github.com/mutaku/Stumpy","tagline":"URL Shortener in Django","google":"<script type=\"text/javascript\">    var _gaq = _gaq || [];   _gaq.push(['_setAccount', 'UA-30545177-1']);   _gaq.push(['_trackPageview']);    (function() {     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);   })();  </script>","note":"Don't delete this file! It's used internally to help with page regeneration."}